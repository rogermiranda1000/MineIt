package com.rogermiranda1000.versioncontroller.blocks;

import org.bukkit.Bukkit;
import org.bukkit.Material;
import org.bukkit.block.Block;
import org.bukkit.block.data.BlockData;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.ItemMeta;
import org.jetbrains.annotations.NotNull;

import java.util.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class BlockTypePost13 extends BlockType {
    private static final Pattern blockDataData = Pattern.compile("minecraft:[^\\[]+(\\[(.+)\\])?");
    private final BlockData data;

    public BlockTypePost13(ItemStack type) {
        BlockData data;
        try {
            data = BlockTypePost13.loadBlockData(type);
        }
        catch (IllegalArgumentException ex) {
            data = type.getType().createBlockData();
        }
        this.data = data;
    }

    public BlockTypePost13(Block block) {
        this.data = block.getBlockData().clone();
    }

    public BlockTypePost13(String str) throws IllegalArgumentException {
        BlockData data;
        try {
            data = Bukkit.createBlockData(str);
        } catch (IllegalArgumentException ex) {
            Material mat = Material.getMaterial(str);
            if (mat == null) throw new IllegalArgumentException(str + " is not a Material, nor BlockData");
            data = mat.createBlockData();
        }
        this.data = data;
    }

    @Override
    public String getName() {
        return this.data.getAsString();
    }

    @Override
    public String getFriendlyName() {
        return this.data.getMaterial().name().toLowerCase();
    }

    @Override
    public void setType(@NotNull Block block) {
        block.setBlockData(this.data);
    }

    @Override
    public ItemStack getItemStack(boolean verbose) {
        ItemStack item = new ItemStack(this.data.getMaterial());

        List<String> data;
        if (verbose && (data = BlockTypePost13.getNonStandardDataList(this.data)).size() > 0) BlockTypePost13.saveBlockData(item, data);

        return item;
    }

    private static String []getDataList(BlockData data) {
        Matcher m = BlockTypePost13.blockDataData.matcher(data.getAsString());
        if (!m.find()) throw new IllegalArgumentException("Expecting block data to be 'minecraft:...[...]', found '" + data.getAsString() + "' instead.");
        String match = m.group(2);
        if (match == null) return new String[]{};
        return match.split(",");
    }

    private static List<String> getNonStandardDataList(BlockData data) {
        String []current = BlockTypePost13.getDataList(data),
                original = BlockTypePost13.getDataList(data.getMaterial().createBlockData());
        ArrayList<String> r = new ArrayList<>();
        for (String e : current) {
            if (Arrays.stream(original).noneMatch(e::equals)) r.add(e);
        }
        return r;
    }

    public boolean defaultMaterial() {
        return this.data.matches(this.data.getMaterial().createBlockData());
    }

    /**
     * Save the BlockData in the item's lore
     * @param item Item to save the info
     * @param data BlockData info
     */
    private static void saveBlockData(ItemStack item, List<String> data) {
        data.add(0, "-- BlockData --");
        data.add("-------------");

        // add lore
        ItemMeta meta = item.getItemMeta();
        meta.setLore(data);
        item.setItemMeta(meta);
    }

    /**
     * Get an item saved by saveBlockData and extract the BlockData
     * @param item Item to extract the dada
     * @return BlockData
     * @throws IllegalArgumentException item not generated by saveBlockData
     */
    private static BlockData loadBlockData(ItemStack item) throws IllegalArgumentException {
        List<String> lore;
        if (item.getItemMeta() == null || (lore = item.getItemMeta().getLore()) == null || !lore.get(0).equals("-- BlockData --")) return item.getType().createBlockData(); // default block

        StringBuilder sb = new StringBuilder();
        sb.append("minecraft:");
        sb.append(item.getType().name().toLowerCase());
        sb.append('[');
        for (int i = 1; i < lore.size() && !lore.get(i).startsWith("--"); i++) sb.append(lore.get(i) + ",");
        sb.setLength(sb.length()-1); // remove last ','
        sb.append(']');
        return Bukkit.createBlockData(sb.toString());
    }
}
